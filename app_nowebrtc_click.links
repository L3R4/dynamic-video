open import MvuHTML;
open import MvuAttrs;
open import MvuEvents;
open import MvuSubscriptions;
import Mvu;
import MvuCommands;
import WebRTC;

typename ID = Int;

module JSApp {
  alien javascript "js/app.js" {
    addMessageTime : (Float) ~> ();
    createAverageTimeButton : () ~> ();
    displayLiveStream : (ID) ~> ();
    displayedPeerStream : (ID) ~> Bool;
    removePeerVideoDiv : (ID) ~> ();
    takePicture : () ~> ();
    getPictureURL : () ~> String;
    displayIcon : (ID, String, String, String) ~> ();
    getSelectedOptions : () ~> [String];
    addPeerToList : (ID) ~> ();
    getName : (ID) ~> String;
    checkLocalVidExists : () ~> Bool;
    removeLocalVid : () ~> ();
  }
}

#broacasts message to all clients on server
fun broadcast(clients, msg) server {
    switch (clients) {
        case [] -> ()
        case x::xs ->
            x ! msg;
            broadcast(xs, msg)
    }
}

#waits for message, sends message to call clients on server
fun serverLoop(clients, numMessages, timeStarted) server {
    receive {
        case Register(pid) ->
          var newClients = pid :: clients;
          serverLoop(newClients, numMessages, timeStarted)

        case BroadcastMessage(msg) ->
          var tm = serverTimeMilliseconds();
          var numMessagesNew = numMessages + 1;
          var timeElapsed = intToFloat(tm - timeStarted) /. 1000.0;
          var rate = intToFloat(numMessagesNew) /. timeElapsed;
          broadcast(clients, Message(msg));
          print("Number of users: " ^^ intToString(length(clients)) ^^ "\n");
          print("Average messages per second: " ^^ floatToString(rate) ^^ " (" ^^ floatToString(timeElapsed) ^^")\n\n");
          serverLoop(clients, numMessagesNew, timeStarted)
    }
}

var serverPid = spawn { serverLoop([], 0, serverTimeMilliseconds()) };

typename DeviceID = String;

typename Position = (Float, Float);

#different ways the character can move
typename CharacterState = [| Up | Down | Left | Right |];

typename PositionInfo = (id : ID, target : Position, timeReceived : Int);
typename IconInfo = (id: ID, name : String, imageURL : String, position : Position, target : Position);

typename ServerMessage = 
  [| TargetPosition : PositionInfo
   | CharacterIcon : IconInfo
  |];

#messages that the updt function receives
typename Msg =
  [| NewFrame
   | MoveChar : CharacterState
   | StopChar : CharacterState
   | UpdateNameField : String
   | NameEntered
   | MediaChosen : (String, String)
   | Joined
   | NoOp
   | ServerMsg : ServerMessage
  |];

typename RequestMsg =
  [| Message : ServerMessage
   | RetrieveMsg : Process({hear : ServerMessage})
  |];

#datetype for character
typename CharacterData = 
  (id: ID, 
   name: String,
   position : Position,
   target : Position,
   imageURL : String
  );

typename DirectionRecord =
  (up : Bool,
   down : Bool,
   left : Bool,
   right : Bool
  );

#this is the model for MVU
typename Room =
  (charData : CharacterData, 
   directions : DirectionRecord,
   state : String, 
   nameField : String, 
   cameraId : DeviceID, 
   micId : DeviceID, 
   others : [CharacterData],
   pid : Process({hear : RequestMsg}),
   prevTimeChosen : Int,
   localBase : Position,
   currentTarget : Position
  );

#parameters
var halfWidth = 650.0;
var halfHeight = 200.0;
var charVelocity = 5.0;

var xLim = 1200.0;
var yLim = 400.0;

var hub1 = (100.0, 200.0);
var hub2 = (200.0, 200.0);
var hub3 = (300.0, 200.0);
var hub4 = (400.0, 200.0);

fun randomHub() {
  var randNum = random();
  if (randNum >= 0.0 && randNum < 0.25) {
    hub1
  } else if (randNum >= 0.25 && randNum < 0.5) {
    hub2
  } else if (randNum >= 0.5 && randNum < 0.75) {
    hub3
  } else {
    hub4
  }
}

#default room to start with
fun defaultRoom(clientPid) {
  var localID = WebRTC.getID();
  var localName = JSApp.getName(localID);
  var chosenHub = randomHub();
  var localBasePos = if (localID >=1 && localID <=5) {
    (100.0 *. intToFloat(localID), 0.0)
  } else {
    (100.0 *. intToFloat(localID), 400.0)
  };
  JSApp.takePicture();
  JSApp.removeLocalVid();
  var pictureURL = JSApp.getPictureURL();
  var charIcon = CharacterIcon(id = localID, name = localName, imageURL = pictureURL, position = (halfWidth, halfHeight), target = (halfWidth, halfHeight));
  serverPid ! BroadcastMessage(charIcon);
  (charData = 
    (id = localID, 
     name = localName, 
     position = (halfWidth, halfHeight),
     target = (halfWidth, halfHeight),
     imageURL = pictureURL
    ),
   directions =
    (up = false,
     down = false,
     left = false,
     right = false
    ), 
   state = "joined", 
   nameField = "", 
   cameraId = "None", 
   micId = "None", 
   others = [],
   pid = clientPid,
   prevTimeChosen = clientTime(),
   localBase = localBasePos,
   currentTarget = hub2
  )
}

#runs every frame
fun animFrameHandler() {
  animationFrame(fun(_) { NewFrame })
}

var upKey = "ArrowUp";
var downKey = "ArrowDown";
var leftKey = "ArrowLeft";
var rightKey = "ArrowRight";
var spaceKey = " ";

#handler to detect keydown event
fun keyDownHandler() {
  open MvuSubscriptions;

  onKeyDown(fun(evt) {
    var keycode = evt.key;
    if (keycode == upKey) {
      MoveChar(Up)
    } else if (keycode == downKey) {
      MoveChar(Down)
    } else if (keycode == leftKey) {
      MoveChar(Left)
    } else if (keycode == rightKey) {
      MoveChar(Right)
    } else {
      NoOp
    }
  })
}

#handler to detect keyup event
fun keyUpHandler() {
  open MvuSubscriptions;

  onKeyUp(fun(evt) {
    var keycode = evt.key;
    if (keycode == upKey) {
      StopChar(Up)
    } else if (keycode == downKey) {
      StopChar(Down)
    } else if (keycode == leftKey) {
      StopChar(Left)
    } else if (keycode == rightKey) {
      StopChar(Right)
    } else {
      NoOp
    }
  })
}

#as user types into name box, this function is called
fun updateFieldHandler() {
  onInput(fun(str) { UpdateNameField(str) })
}

#when user presses enter, their name is passed into 
#their character data and joins room
fun enterHandler() {
  onEnter(fun() { NameEntered })
}

fun pictureClickHandler() {
  onClick(fun() { Joined })
}

fun mediaClickHandler() {
  onClick(fun() {
    var deviceIds = JSApp.getSelectedOptions();
    var camId = hd(deviceIds);
    var micId = hd(tl(deviceIds));
    MediaChosen(camId, micId)
  })
}

sig euclideanDistance : (Position, Position) ~> Float
fun euclideanDistance((x1, y1), (x2, y2)) {
  sqrt((x1 -. x2)^.2.0 +. (y1 -. y2)^.2.0)
}

fun isCharInList(c, lst) {
  switch(lst) {
    case [] -> false
    case x::xs ->
      if (x.id == c.id)
        true
      else
        isCharInList(c, xs)
  }
}

fun printNames(chars) {
  switch(chars) {
    case [] -> ()
    case x::xs ->
      print(x.name);
      printNames(xs)
  }
}

fun printNamesHandler(chars) {
  onClick(fun() {
    if (length(chars) > 0) {
      print("Other users:");
      printNames(chars);
      NoOp
    } else {
      print("No other users");
      NoOp
    }
  })
}

sig setCharacterDirection : (DirectionRecord, CharacterState) ~> DirectionRecord
fun setCharacterDirection(directions, direction) {
  if (direction == Up) {
    (directions with up = true)
  } else if (direction == Down) {
    (directions with down = true)
  } else if (direction == Left) {
    (directions with left = true)
  } else {
    (directions with right = true)
  }
}

sig unsetCharacterDirection : (DirectionRecord, CharacterState) ~> DirectionRecord
fun unsetCharacterDirection(directions, direction) {
  if (direction == Up) {
    (directions with up = false)
  } else if (direction == Down) {
    (directions with down = false)
  } else if (direction == Left) {
    (directions with left = false)
  } else {
    (directions with right = false)
  }
}

#moves character in certain direction
sig moveChar : (CharacterData, DirectionRecord) ~> CharacterData
fun moveChar(charData, directions) {
  var yDis0 = 0.0;
  var yDis1 = if (directions.up == true) {
    yDis0 -. charVelocity
  } else {
    yDis0
  };
  var yDis2 = if (directions.down == true) {
    yDis1 +. charVelocity
  } else {
    yDis1
  };
  var xDis0 = 0.0;
  var xDis1 = if (directions.left == true) {
    xDis0 -. charVelocity
  } else {
    xDis0
  };
  var xDis2 = if (directions.right == true) {
    xDis1 +. charVelocity
  } else {
    xDis1
  };
  var newX = first(charData.position) +. xDis2;
  var newY = second(charData.position) +. yDis2;
  if (newX >= 0.0 && newX <= xLim && newY >= 0.0 && newY <= yLim)
    (charData with position = (newX, newY))
  else
    charData
}

sig determineDirections : (Position, Position) ~> DirectionRecord
fun determineDirections(currentPos, targetPos) {
  var directionVector = (first(targetPos) -. first(currentPos), second(targetPos) -. second(currentPos));
  var xVal = first(directionVector);
  var yVal = second(directionVector);
  var xAbs = sqrt(xVal *. xVal);
  var yAbs = sqrt(yVal *. yVal);
  if (xAbs <= 10.0 && yVal > 0.0) {
    (up = false, down = true, left = false, right = false)
  } else if (xAbs <= 10.0 && yVal < 0.0) {
    (up = true, down = false, left = false, right = false)
  } else if (xVal > 0.0 && yAbs <= 10.0) {
    (up = false, down = false, left = false, right = true)
  } else if (xVal < 0.0 && yAbs <= 10.0) {
    (up = false, down = false, left = true, right = false)
  } else if (xVal > 0.0 && yVal > 0.0) {
    (up = false, down = true, left = false, right = true)
  } else if (xVal > 0.0 && yVal < 0.0) {
    (up = true, down = false, left = false, right = true)
  } else if (xVal < 0.0 && yVal < 0.0) {
    (up = true, down = false, left = true, right = false)
  } else if (xVal < 0.0 && yVal > 0.0) {
    (up = false, down = true, left = true, right = false)
  } else {
    (up = false, down = false, left = false, right = false)
  }
}

sig updateOthers : ([CharacterData]) ~> [CharacterData]
fun updateOthers(others) {
  switch(others) {
    case [] -> []
    case x::xs ->
      var dirs = determineDirections(x.position, x.target);
      var newChar = moveChar(x, dirs);
      newChar :: updateOthers(xs)
  }
}

fun printDirections(directions) {
  var str1 = "(";
  var str2 = if (directions.up) {
    str1 ^^ "up, "
  } else {
    str1
  };
  var str3 = if (directions.right) {
    str2 ^^ "right, "
  } else {
    str2
  };
  var str4 = if (directions.down) {
    str3 ^^ "down, "
  } else {
    str3
  };
  var str5 = if (directions.left) {
    str4 ^^ "left, "
  } else {
    str4
  };
  print(str5 ^^ ")");
  ()
}

sig characterMoved : (CharacterData, CharacterData) ~> Bool
fun characterMoved(oldCharData, newCharData) {
  first(oldCharData.position) <> first(newCharData.position) || second(oldCharData.position) <> second(newCharData.position)
}

#replaces charData in list of charDatas
fun replaceChar(char, peerChars) {
  switch(peerChars) {
    case [] -> []
    case x::xs ->
      if (x.id == char.id)
        char :: replaceChar(char, xs)
      else
        x :: replaceChar(char, xs)
  }
}

fun charWithIdExists(id, chars) {
  switch(chars) {
    case [] -> false
    case x::xs ->
      if (x.id == id)
        true
      else
        charWithIdExists(id, xs)
  }
}

fun getCharWithId(id, chars) {
  switch(chars) {
    case x::xs ->
      if (x.id == id)
        x
      else
        getCharWithId(id, xs)
  }
}

fun isCloseToPeer(localChar, peerChar) {
  var xLocalChar = first(localChar.position);
  var yLocalChar = second(localChar.position);
  var xPeerChar = first(peerChar.position);
  var yPeerChar = second(peerChar.position);
  var distance = euclideanDistance((xLocalChar, yLocalChar), (xPeerChar, yPeerChar));
  if (distance <= 75.0)
    true
  else
    false
}

fun confirmConnection(localChar, peerChar) {
  if (WebRTC.checkIfConnectedToPeer(peerChar.id)) {
    JSApp.displayLiveStream(peerChar.id)
  } else if (not(WebRTC.checkIfPCObjectExists(peerChar.id))){
    print("Connection doesn't even exist anymore, silly")
  } else {
    confirmConnection(localChar, peerChar)
  }
}

fun connectToPeer(localChar, peerChar) {
  print("Calling connectToUser to " ^^ intToString(peerChar.id));
  WebRTC.connectToUser(peerChar.id);
  confirmConnection(localChar, peerChar)
}

fun connectToPeers(charData, peerChars) {
  switch(peerChars) {
    case [] -> ()
    case x::xs ->
      if (not(WebRTC.checkIfPCObjectExists(x.id)) && WebRTC.disconnectedForSecond(x.id)) {
        var connId = spawnClient { connectToPeer(charData, x) };
        connectToPeers(charData, xs)
      } else {
        connectToPeers(charData, xs)
      }
  }
}

fun disconnectFromPeer(peerChar) {
  WebRTC.disconnectFromUser(peerChar.id);
  JSApp.removePeerVideoDiv(peerChar.id)
}

fun disconnectFromPeers(charData, peerChars) {
  switch(peerChars) {
    case [] -> ()
    case x::xs ->
    if (WebRTC.checkIfConnectedToPeer(x.id) && WebRTC.oneSecondElapsed(x.id)) {
      disconnectFromPeer(x);
      disconnectFromPeers(charData, xs)
    } else {
      disconnectFromPeers(charData, xs)
    }
  }
}

fun getClosePeers(localChar, others) {
  switch(others) {
    case [] -> []
    case x::xs ->
      var isClose = isCloseToPeer(localChar, x);
      if (isClose)
        x :: getClosePeers(localChar, xs)
      else
        getClosePeers(localChar, xs)
  }
}

fun getFarPeers(others, closePeers) {
  switch(others) {
    case [] -> []
    case x::xs ->
      var isFarPeer = not(isCharInList(x, closePeers));
      if (isFarPeer)
        x :: getFarPeers(xs, closePeers)
      else
        getFarPeers(xs, closePeers)
  }
}

fun manageConnections(charData, peerChars) {
  var closePeers = getClosePeers(charData, peerChars);
  var farPeers = getFarPeers(peerChars, closePeers);
  connectToPeers(charData, closePeers);
  disconnectFromPeers(charData, farPeers);
  ()
}


#checks to see if a peer's character has been updated by 
#retrieving the new charData
sig retrieveServerMessage : (%) {}~> Msg
fun retrieveServerMessage(pid) {
  spawnWait {
    pid ! RetrieveMsg(self());
    receive {
        case msg -> ServerMsg(msg)
    }
  }
}

#once the user receives an new/updated charData, it updates 
#the room based on it
sig processServerMsg : (ServerMessage, Room) ~> Room
fun processServerMsg(serverMsg, room) {
  switch(serverMsg){
    case TargetPosition(info) ->
      if (info.id <> room.charData.id && 
          room.state == "joined" && 
          charWithIdExists(info.id, room.others)
          ) {
        var messageTime = intToFloat(clientTimeMilliseconds() - info.timeReceived) /. 1000.0;
        JSApp.addMessageTime(messageTime);
        var currentChar = getCharWithId(info.id, room.others);
        var newChar = (currentChar with target = info.target);
        var newPeerList = replaceChar(newChar, room.others);
        (room with others = newPeerList)
      } else {
        room
      }
    case CharacterIcon(info) ->
      if (info.id <> room.charData.id && 
          room.state == "joined" && 
          not(charWithIdExists(info.id, room.others))
          ) {
        var charData = 
          (id = info.id, 
           name = info.name, 
           position = info.position,
           target = info.target,
           imageURL = info.imageURL
          );
        var appendToOthers = charData :: room.others;
        var cData = room.charData;
        var charIcon = 
          CharacterIcon(id = cData.id, 
                        name = cData.name, 
                        imageURL = cData.imageURL,
                        position = room.charData.position,
                        target = room.charData.target
                        );
        serverPid ! BroadcastMessage(charIcon);
        serverPid ! BroadcastMessage(charIcon);
        serverPid ! BroadcastMessage(charIcon);
        (room with others = appendToOthers)
      } else {
        room
      }
  }
}

#main update function in MVU cycle, runs when message (Msg) is received
sig updt : (Msg, Room) ~> (Room, MvuCommands.Command(Msg))
fun updt(msg, room) {
  switch(msg) {

    #every frame, this is the case, updates room based on room
    case NewFrame ->
      var currentTime = clientTime();
      var timeMod8 = currentTime - (8 * (currentTime / 8));
      var timeMod4 = currentTime - (4 * (currentTime / 4));
      var timeMod2 = currentTime - (2 * (currentTime / 2));
      var chosenHub = hub2;
      if (timeMod8 == 0 && currentTime <> room.prevTimeChosen) {
        print("Moving to hub");
        #var chosenHub = randomHub();
        var dirs = determineDirections(room.charData.position, chosenHub);
        var newChar = moveChar(room.charData, dirs);
        var newChar2 = (newChar with target = chosenHub);
        var newOthers = updateOthers(room.others);
        var charPos = TargetPosition(id = newChar.id, target = chosenHub, timeReceived = -1);
        serverPid ! BroadcastMessage(charPos);
        #manageConnections(room.charData, newOthers);
        ((room with charData = newChar2, directions = dirs, others = newOthers, prevTimeChosen = currentTime, currentTarget = chosenHub), MvuCommands.empty)
      } else if (timeMod4 == 0 && currentTime <> room.prevTimeChosen) {
        var dirs = determineDirections(room.charData.position, room.localBase);
        printDirections(dirs);
        var newChar = moveChar(room.charData, dirs);
        var newChar2 = (newChar with target = room.localBase);
        var newOthers = updateOthers(room.others);
        var charPos = TargetPosition(id = newChar.id, target = room.localBase, timeReceived = -1);
        serverPid ! BroadcastMessage(charPos);
        #manageConnections(room.charData, newOthers);
        ((room with charData = newChar2, directions = dirs, others = newOthers, prevTimeChosen = currentTime, currentTarget = room.localBase), MvuCommands.empty)
      } else {
        var newChar = moveChar(room.charData, room.directions);
        var newOthers = updateOthers(room.others);
        var distanceToTarg = euclideanDistance(newChar.position, room.currentTarget);
        var charMoved = characterMoved(room.charData, newChar);
        if (charMoved && distanceToTarg > 10.0) {
          var newDirs = determineDirections(room.charData.position, room.currentTarget);
          #manageConnections(room.charData, newOthers);
          ((room with charData = newChar, directions = newDirs, others = newOthers), MvuCommands.empty)
        } else if (charMoved && distanceToTarg <= 10.0) {
          var newDirs = (up = false, down = false, left = false, right = false);
          var newTarget = if (room.currentTarget == room.localBase) {
            chosenHub
          } else {
            room.localBase
          };
          #manageConnections(room.charData, newOthers);
          ((room with charData = newChar, directions = newDirs, others = newOthers, currentTarget = newTarget), MvuCommands.empty)
        } else {
          #manageConnections(room.charData, newOthers);
          ((room with others = newOthers), MvuCommands.empty)
        }
      }
    
    case MoveChar(dir) ->
      (room, MvuCommands.empty)
    
    case StopChar(dir) ->
      (room, MvuCommands.empty)

    #updates name field of room with the latest keyboard input
    case UpdateNameField(str) ->
      ((room with nameField = str), MvuCommands.empty)
    
    #updates room state to enter image
    case NameEntered ->
      ((room with state = "enterMedia"), MvuCommands.empty)
    
    #runs when user presses enter, and changes state of room to joined
    case MediaChosen(cameraID, micID) ->
      #WebRTC.readyMediaDevices(cameraID, micID);
      #WebRTC.registerUser();
      ((room with cameraId = cameraID, micId = micID, state = "enterImage"), MvuCommands.empty)
    
    case Joined ->
      JSApp.takePicture();
      var pictureURL = JSApp.getPictureURL();
      var cData = (room.charData with id = WebRTC.getID(), name = room.nameField, imageURL = pictureURL);
      var charIcon = CharacterIcon(id = cData.id, name = cData.name, imageURL = pictureURL, position = cData.position, target = cData.target);
      serverPid ! BroadcastMessage(charIcon);
      ((room with charData = cData, state = "joined"), MvuCommands.empty)
    
    case NoOp -> (room, MvuCommands.empty)

    #runs when the client finds a message (charData) in the client loop process
    case ServerMsg(msg) ->
      var room = processServerMsg(msg, room);
      var f = fun() { retrieveServerMessage(room.pid) };
      (room, Spawn(f))
  }
}

### Rendering
var ae = MvuAttrs.empty;
var he = MvuHTML.empty;
fun ch(xs) { MvuHTML.concat(xs) }
fun ca(xs) { MvuAttrs.concat(xs) }

#HTML for charData
sig drawChar : (CharacterData) -> HTML(Msg)
fun drawChar(c) {
  var x = first(c.position);
  var y = second(c.position);
  var name = c.name;
  div (class ("character") +@
    style ("left:" ^^ floatToString(x) ^^ "px;top:" ^^ floatToString(y) ^^ "px;position:absolute;" ^^
    "background-image: url(" ^^ c.imageURL ^^ ");background-position: center;"),
    p (class("charName"), textNode(name))
  )
}

#list of charDatas in HTML
sig listOfHTMLChars : ([CharacterData]) ~> [HTML(Msg)]
fun listOfHTMLChars(cs) {
  switch(cs) {
    case []         -> []
    case charData::xs ->
      drawChar(charData) :: listOfHTMLChars(xs)
  }
}

sig drawCameraOption : (String, String) ~> HTML(Msg)
fun drawCameraOption(deviceId, label) {
  option (
    ca([
      id ("cameraOption"),
      value (deviceId)
    ]),
    textNode(label)
  )
}

sig drawMicOption : (String, String) ~> HTML(Msg)
fun drawMicOption(deviceId, label) {
  option (
    ca([
      id ("micOption"),
      value (deviceId)
    ]),
    textNode(label)
  )
}

sig listOfDeviceOptions : (([String], [String]), String) ~> [HTML(Msg)]
fun listOfDeviceOptions(devs, type) {
  switch(devs) {
    case ([], []) -> []
    case (id::xs, label::ys) ->
      if (type == "camera")
        drawCameraOption(id, label) :: listOfDeviceOptions((xs, ys), type)
      else
        drawMicOption(id, label) :: listOfDeviceOptions((xs, ys), type)
  }
}

#HTML UI for welcome page and name box
fun enterNameView(str) {
  div (id ("canvas"),
    div (id ("joinBox"),
      ch([
        h1 (id ("welcomeText"), textNode("Enter your name:")),
        input (
          ca([
            type ("text"),
            name ("enterName"),
            id ("nameBox"),
            value (str),
            updateFieldHandler(),
            enterHandler()
          ]),
          he)
      ])
    )
  )
}

fun enterMediaView() {
  var camIds = WebRTC.getDeviceIds("videoinput");
  var camLabels = WebRTC.getDeviceLabels("videoinput");
  var micIds = WebRTC.getDeviceIds("audioinput");
  var micLabels = WebRTC.getDeviceLabels("audioinput");
  div (id ("canvas"),
    div (id ("joinBox"),
      ch([
        h1 (id ("welcomeText"), textNode("Choose your media")),
        h3 (id ("videoInput"), textNode("Camera:")),
        h3 (id ("audioInput"), textNode("Microphone:")),
        select_(id ("selectCamera"),
          ch(listOfDeviceOptions((camIds, camLabels), "camera"))
        ),
        select_(id ("selectMic"),
          ch(listOfDeviceOptions((micIds, micLabels), "mic"))
        ),
        input (
          ca([
            id ("mediaSubmitButton"),
            type ("submit"),
            value ("Confirm"),
            mediaClickHandler()
          ]),
          he)
      ])
    )
  )
}

fun enterImageView() {
  JSApp.displayLiveStream(0);
  div (id ("canvas"),
    div (id ("joinBox"),
      ch([
        h1 (id ("welcomeText"), textNode("Take a photo to use as your character icon!")),
        input (
          ca([
            id ("pictureTaker"),
            type ("submit"),
            value ("Use"),
            pictureClickHandler()
          ]),
          he)
      ])
    )
  )
}

fun joinedView(room) {
  #var elem = getNodeById("localVideoDiv");
  #domSetAttributeFromRef(elem, "class", "webcamMode");
  var name = room.charData.name;
  ch([
    h1 (class("localName"), textNode(name)),
    div (id ("canvas"), ch([
      drawChar(room.charData),
      ch(listOfHTMLChars(room.others)),
      input (
        ca([
          id ("printNames"),
          type ("submit"),
          value ("Print Users"),
          printNamesHandler(room.others)
        ]),
        he)
    ]))
  ])
}

#main view function in MVU cycle, display different HTML bases on state of model
sig view : (Room) ~> HTML(Msg)
fun view(room) {
  if (room.state == "joined") {
    joinedView(room)
  } else if (room.state == "enterName") {
    enterNameView(room.nameField)
  } else if (room.state == "enterMedia") {
    enterMediaView()
  } else {
    enterImageView()
  }
}

#subscriptions to detect events for updt function
sig subscriptions : (Room) -> Sub(Msg)
fun subscriptions(model) {
  animFrameHandler() +^ keyUpHandler() +^ keyDownHandler()
}

#sends every message to every process
fun drain(messages, pids) {
  switch (messages) {
    case [] -> (messages, pids)
    case msg :: msgs ->
      switch (pids) {
        case [] -> (messages, pids)
        case pid :: pids ->
          pid ! msg;
          (msgs, pids)
      }
  }
}

#invariant, at least one of msgs, pids is empty.
fun clientLoop(msgs, pids, timeStarted, numMessages, lastMessageTime, hndl) {
    receive {
      case Message(msg) ->
        switch(msg) {
          case TargetPosition(info) ->
            var tm = clientTimeMilliseconds();
            var timeElapsed = intToFloat(tm - timeStarted) /. 1000.0;
            print("Average messages per second: " ^^ floatToString(intToFloat(numMessages+1) /. timeElapsed) ^^ " | " ^^ floatToString(timeElapsed) ^^ "\n");
            var charPos = TargetPosition(info with timeReceived = clientTimeMilliseconds());
            Mvu.dispatch(ServerMsg(charPos), hndl);
            clientLoop(msgs, pids, timeStarted, numMessages + 1, tm, hndl)
          case CharacterIcon(info) ->
            Mvu.dispatch(ServerMsg(msg), hndl);
            clientLoop(msgs, pids, timeStarted, numMessages, lastMessageTime, hndl)
        }

      case RetrieveMsg(pid) ->
        var (msgs, pids) = drain(msgs, pids ++ [pid]);
        clientLoop(msgs, pids, timeStarted, numMessages, lastMessageTime, hndl)
    }
}

fun waitForID() {
  var id = WebRTC.getID();
  if (intToString(id) <> "undefined")
    ()
  else
    waitForID()
}

fun waitForLocalVid() {
  var localVidExists = JSApp.checkLocalVidExists();
  if (localVidExists)
    ()
  else
    waitForLocalVid()
}

#begins webRTC connection and registers client with server
fun clientRegister() {
  WebRTC.gatherDeviceIds("videoinput");
  WebRTC.gatherDeviceIds("audioinput");
  WebRTC.readyCam("_");
  WebRTC.readyMic("_");
  WebRTC.createLocalVideo();
  WebRTC.registerUser();
  JSApp.displayLiveStream(0);
  waitForID();
  waitForLocalVid();
  sleep(500);
  var hndl = Mvu.runHandle("placeholder", defaultRoom(self()), view, updt,
      subscriptions, MvuCommands.empty);
  JSApp.createAverageTimeButton();
  serverPid ! Register(self());
  clientLoop([], [], clientTimeMilliseconds(), 0, clientTimeMilliseconds(), hndl)
}

fun mainPage(serverPid) {
  var clientPid = spawnClient { clientRegister() };
  page
  <html>
    <head>
      <title>Room</title>
      <link rel="stylesheet" href="css/app.css" type="text/css" />
    </head>
    <body>
      <div id="placeholder"></div>
      <div id="streamScoll"></div>
    </body>
  </html>
}

fun main() {
  addRoute("/", fun(_) { mainPage(serverPid) });
  addStaticRoute("/css", "css", [("css", "text/css")]);
  addStaticRoute("/js", "js", [("js", "text/javascript")]);
  serveWebsockets();
  servePages()
}

main()
