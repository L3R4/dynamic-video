open import MvuHTML;
open import MvuAttrs;
open import MvuEvents;
open import MvuSubscriptions;
import Mvu;
import MvuCommands;
import WebRTC;

module JSApp {
  alien javascript "js/app.js" {
    appendVidToDiv : (String) ~> ();
    toggleCam : (String, String) ~> ();
  }
}

#broacasts message to all clients on server
fun broadcast(clients, msg) server {
    switch (clients) {
        case [] -> ()
        case c::clients ->
            c ! msg;
            broadcast(clients, msg)
    }
}

#waits for message, sends message to call clients on server
fun serverLoop(clients) server {
    receive {
        case Register(pid) ->
          var newClients = pid :: clients;
          serverLoop(newClients)
        case BcastModelMsg(msg) ->
          broadcast(clients, ModelMessage(msg));
          serverLoop(clients)
    }
}

var serverPid = spawn { serverLoop([]) };

#different ways the circle can move
typename CircleState = [| Up | Down | Left | Right | Still |];

#datetype for circle
typename Circle =
  (id: String, name: String, x : Float, y: Float, vx : Float, vy : Float,
  directionV : CircleState, directionH : CircleState);

#circle is only type of server message
typename ServerMessage = Circle;

#messages that the updt function receives
typename Msg =
  [| NewFrame
   | MoveCircleV : CircleState
   | MoveCircleH : CircleState
   | UpdateNameField : String
   | NameEntered
   | Joined
   | NoOp
   | ServerMsg:ServerMessage
  |];

typename RequestMsg =
  [| ModelMessage:ServerMessage | RetrieveMsg:Process({hear:ServerMessage}) |];

#this is the model for MVU
typename Room =
  (circle : Circle, state : String, nameField : String, others : [Circle], pid:Process({hear:RequestMsg}));

#parameters
var halfWidth = 560.0;
var halfHeight = 315.0;
var circleVelocity = 5.0;

#default room to start with
fun defaultRoom(clientPid) {
  (circle = (id = "None", name = "None", x = halfWidth, y = halfHeight, vx = circleVelocity, vy = circleVelocity,
  directionV = Still, directionH = Still), state = "enterName", nameField = "", others = [], pid = clientPid)
}

#runs every frame
fun animFrameHandler() {
  animationFrame(fun(_) { NewFrame })
}

var upKey = "ArrowUp";
var downKey = "ArrowDown";
var leftKey = "ArrowLeft";
var rightKey = "ArrowRight";
var spaceKey = " ";

#handler to detect keydown event
fun keyDownHandler() {
  open MvuSubscriptions;

  onKeyDown(fun(evt) {
    var keycode = evt.key;
    if (keycode == upKey) {
      MoveCircleV(Up)
    } else if (keycode == downKey) {
      MoveCircleV(Down)
    } else if (keycode == leftKey) {
      MoveCircleH(Left)
    } else if (keycode == rightKey) {
      MoveCircleH(Right)
    } else {
      NoOp
    }
  })
}

#handler to detect keyup event
fun keyUpHandler() {
  open MvuSubscriptions;

  onKeyUp(fun(evt) {
    var keycode = evt.key;
    if (keycode == upKey || keycode == downKey) {
      MoveCircleV(Still)
    } else if (keycode == leftKey || keycode == rightKey){
      MoveCircleH(Still)
    } else {
      NoOp
    }
  })
}

#as user types into name box, this function is called
fun updateFieldHandler() {
  onInput(fun(str) { UpdateNameField(str) })
}

#when user presses enter, their name is passed into their circle and joins room
fun enterHandler() {
  onEnter(fun() { NameEntered })
}

fun clickHandler() {
  onClick(fun() { Joined })
}

#moves circle in certain direction
fun moveCircle(circle, direction) {
  if (direction == Up) {
    (circle with y = circle.y -. circleVelocity)
  } else if (direction == Down) {
    (circle with y = circle.y +. circleVelocity)
  } else if (direction == Left) {
    (circle with x = circle.x -. circleVelocity)
  } else if (direction == Right) {
    (circle with x = circle.x +. circleVelocity)
  } else {
    circle
  }
}

#removes circle from list of circles
fun removeCircle(c, cs) {
  switch(cs) {
    case [] -> []
    case x::xs ->
      if (x.id == c.id)
        removeCircle(c, xs)
      else
        x :: removeCircle(c, xs)
  }
}

#checks if user's circle is close to another's circle, then displays their cam
sig closeEnough : (Circle, Circle) ~> ()
fun closeEnough(c1, c2) {
  var distance = sqrt((c2.x -. c1.x)^.2.0 +. (c2.y -. c1.y)^.2.0);
  if (distance <= 150.0) {
    WebRTC.connectToUser(c1.id);
    WebRTC.shareStreamWithPeer(c1.id);
    ()
  } else {
    WebRTC.disconnectFromUser(c1.id);
    ()
  }
}

#checks whether the user is close to any of their peers
fun closeToOthers(c, others) {
  switch(others) {
    case [] -> ()
    case x::xs ->
      closeEnough(x, c);
      closeToOthers(c, xs)
  }
}

#checks to see if a peer's circle has been updated by retrieving the new circle
sig retrieveServerMessage : (%) {}~> Msg
fun retrieveServerMessage(pid) {
  spawnWait {
    pid ! RetrieveMsg(self());
    receive {
        case msg -> ServerMsg(msg)
    }
  }
}

#once the user receives an new/updated circle, it updates the room based on it
sig processServerMsg : (Circle, Room) ~> Room
fun processServerMsg(msg, room) {
    var c = msg;
    var removeOther = removeCircle(c, room.others);
    var addNewOther = c :: removeOther;
    if (c.id <> room.circle.id && room.state == "joined") {
      closeEnough(c, room.circle);
      (room with others = addNewOther)
    } else if (c.id <> room.circle.id && room.state == "joined"){
      (room with others = addNewOther)
    } else {
      room
    }
}

#main update function in MVU cycle, runs when message (Msg) is received
sig updt : (Msg, Room) ~> (Room, MvuCommands.Command(Msg))
fun updt(msg, room) {
  switch(msg) {
    #every frame, this is the case, updates room based on room
    case NewFrame ->
      var newCircleV = moveCircle(room.circle, room.circle.directionV);
      var newCircleH = moveCircle(newCircleV, room.circle.directionH);
      ((room with circle = newCircleH), MvuCommands.empty)
    #runs when user presses arrow key up or down, updates user's circle
    case MoveCircleV(i) ->
      if (room.state == "joined") {
        var updatedCircle = (room.circle with directionV = i);
        var newCircleV = moveCircle(updatedCircle, updatedCircle.directionV);
        var newCircleH = moveCircle(newCircleV, updatedCircle.directionH);
        closeToOthers(newCircleH, room.others);
        serverPid ! BcastModelMsg(newCircleH);
        ((room with circle = newCircleH), MvuCommands.empty)
      } else {
        (room, MvuCommands.empty)
      }
    #runs when user presses arrow key left or right, updates user's circle
    case MoveCircleH(i) ->
      if (room.state == "joined") {
        var updatedCircle = (room.circle with directionH = i);
        var newCircleH = moveCircle(updatedCircle, updatedCircle.directionH);
        var newCircleV = moveCircle(newCircleH, updatedCircle.directionV);
        closeToOthers(newCircleV, room.others);
        serverPid ! BcastModelMsg(newCircleV);
        ((room with circle = newCircleV), MvuCommands.empty)
      } else {
        (room, MvuCommands.empty)
      }
    #updates name field of room with the latest keyboard input
    case UpdateNameField(str) ->
      ((room with nameField = str), MvuCommands.empty)
    #updates room state to enter image
    case NameEntered ->
      ((room with state = "enterImage"), MvuCommands.empty)
    #runs when user presses enter, and changes state of room to joined
    case Joined ->
      var c = (room.circle with id = WebRTC.getUUID(), name = room.nameField);
      serverPid ! BcastModelMsg(c);
      ((room with circle = c, state = "joined", nameField = ""), MvuCommands.empty)
    case NoOp -> (room, MvuCommands.empty)
    #runs when the client finds a message (circle) in the client loop process
    case ServerMsg(msg) ->
      if (room.state == "joined") {
        serverPid ! BcastModelMsg(room.circle);
        var room = processServerMsg(msg, room);
        var f = fun() { retrieveServerMessage(room.pid) };
        (room, Spawn(f))
      } else {
        var room = processServerMsg(msg, room);
        var f = fun() { retrieveServerMessage(room.pid) };
        (room, Spawn(f))
      }
  }
}

### Rendering
var ae = MvuAttrs.empty;
var he = MvuHTML.empty;
fun ch(xs) { MvuHTML.concat(xs) }
fun ca(xs) { MvuAttrs.concat(xs) }

#HTML for circle
sig drawCircle : (Circle) -> HTML(Msg)
fun drawCircle(c) {
  var x = c.x;
  var y = c.y;
  var name = c.name;
  div (class ("circle") +@
       style ("left:" ^^ floatToString(x) ^^ "px;top:" ^^ floatToString(y) ^^ "px;position:absolute;"),
       p (class("circleName"), textNode(name))
  )
}

#list of circles in HTML
sig listOfHTMLCircles : ([Circle]) ~> [HTML(Msg)]
fun listOfHTMLCircles(cs) {
  switch(cs) {
    case []         -> []
    case circle::xs ->
      drawCircle(circle) :: listOfHTMLCircles(xs)
  }
}

#HTML UI for welcome page and name box
fun enterNameView(str) {
  div (class ("canvas2"),
    div (class ("joinBox"),
      ch([
        h1 (id ("welcomeText"), textNode("Enter your name:")),
        input (
          ca([
            type ("text"),
            class ("nameBox"),
            name ("enterName"),
            id ("enterName"),
            value (str),
            updateFieldHandler(),
            enterHandler()
          ]),
          he)
      ])
    )
  )
}

fun enterImageView() {
  JSApp.appendVidToDiv("local");
  div (class ("canvas2"),
    div (class ("joinBox"),
      ch([
        h1 (id ("welcomeText"), textNode("Take a nice picture of yourself:")),
        div (class ("localVideoDiv"), he),
        input (
          ca([
            type ("submit"),
            value ("Use"),
            clickHandler()
          ]),
          he)
      ])
    )
  )
}

#main view function in MVU cycle, display different HTML bases on state of model
sig view : (Room) ~> HTML(Msg)
fun view(room) {
  if (room.state == "joined") {
    var elem = getNodeById("localVideo");
    if (isNull(elem) == false) {
      domSetAttributeFromRef(elem, "style", "display: block");
      div (class ("canvas"), ch([
        drawCircle(room.circle),
        ch(listOfHTMLCircles(room.others))
      ]))
    } else {
      div (class ("canvas"), ch([
        drawCircle(room.circle),
        ch(listOfHTMLCircles(room.others))
      ]))
    }
  } else if (room.state == "enterName") {
    enterNameView(room.nameField)
  } else {
    enterImageView()
  }
}

#subscriptions to detect events for updt function
sig subscriptions : (Room) -> Sub(Msg)
fun subscriptions(model) {
  animFrameHandler() +^ keyUpHandler() +^ keyDownHandler()
}

#sends every message to every process
fun drain(msgs, pids) {
    switch (msgs) {
        case [] -> (msgs, pids)
        case msg :: msgs ->
            switch (pids) {
                case [] -> (msgs, pids)
                case pid :: pids ->
                    pid ! msg;
                    (msgs, pids)
            }
    }
}

#invariant, at least one of msgs, pids is empty.
fun clientLoop(msgs, pids) {
    receive {
      case ModelMessage(msg) ->
        var (msgs, pids) = drain(msgs ++ [msg], pids);
        clientLoop(msgs, pids)
      case RetrieveMsg(pid) ->
        var (msgs, pids) = drain(msgs, pids ++ [pid]);
        clientLoop(msgs, pids)
    }
}

#begins webRTC connection and registers client with server
fun clientRegister() {
  WebRTC.registerUser();
  serverPid ! Register(self());
  clientLoop([], [])
}

fun runMVU(clientPid) {
  WebRTC.waitForWebcam();
  Mvu.run("placeholder", defaultRoom(clientPid), view, updt,
      subscriptions, MvuCommands.spawnProc(fun () { retrieveServerMessage(clientPid) }));
  ()
}

fun mainPage(serverPid) {
  var clientPid = spawnClient { clientRegister() };
  var mvuClient = spawnClient { runMVU(clientPid) };
  page
  <html>
    <head>
      <title>Room</title>
      <link rel="stylesheet" href="css/room.css" type="text/css" />
    </head>
    <body>
      <div id="placeholder"></div>
      <div id="localVid"></div>
      <div id="videos"></div>
    </body>
  </html>
}

fun main() {
  addRoute("/", fun(_) { mainPage(serverPid) });
  addStaticRoute("/css", "css", [("css", "text/css")]);
  addStaticRoute("/js", "js", [("js", "text/javascript")]);
  serveWebsockets();
  servePages()
}

main()
