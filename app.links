open import MvuHTML;
open import MvuAttrs;
open import MvuEvents;
open import MvuSubscriptions;
import Mvu;
import MvuCommands;
import WebRTC;

module JSApp {
  alien javascript "js/app.js" {
    displayLiveStream : (String) ~> ();
    removePeerVideoDiv : (String) ~> ();
    takePicture : () ~> ();
    getPictureURL : () ~> String;
    displayIcon : (String, String, String, String) ~> ();
    gatherMediaDeviceIds : (String) ~> ();
    checkDevicesGathered : () ~> Bool;
    getDeviceIds : (String) ~> [String];
    getDeviceLabels : (String) ~> [String];
    getSelectedOptions : () ~> [String];
    addPeerToList : (String) ~> ();
  }
}

#broacasts message to all clients on server
fun broadcast(clients, msg) server {
    switch (clients) {
        case [] -> ()
        case c::clients ->
            c ! msg;
            broadcast(clients, msg)
    }
}

#waits for message, sends message to call clients on server
fun serverLoop(clients) server {
    receive {
        case Register(pid) ->
          var newClients = pid :: clients;
          serverLoop(newClients)
        case BroadcastPosition(msg) ->
          broadcast(clients, Position(msg));
          serverLoop(clients)
        case BroadcastIcon(msg) ->
          broadcast(clients, Icon(msg));
          serverLoop(clients)
    }
}

var serverPid = spawn { serverLoop([]) };

#different ways the character can move
typename CharacterState = [| Up | Down | Left | Right | Still |];

typename PositionInfo = (id: String, x : Float, y : Float);
typename IconInfo = (id: String, name : String, imageURL : String);

typename ServerMessage = [| CharacterPosition : PositionInfo | CharacterIcon : IconInfo |];

#messages that the updt function receives
typename Msg =
  [| NewFrame
   | MoveCharV : CharacterState
   | MoveCharH : CharacterState
   | UpdateNameField : String
   | NameEntered
   | MediaChosen : (String, String)
   | Joined
   | NoOp
   | ServerMsg:ServerMessage
  |];

typename RequestMsg =
  [| Position:ServerMessage | Icon:ServerMessage | RetrieveMsg:Process({hear:ServerMessage}) |];

#datetype for character
typename CharacterData = (id: String, name: String, x : Float, y: Float, imageURL : String);

#this is the model for MVU
typename Room =
  (charData : CharacterData, directionV : CharacterState, directionH : CharacterState, state : String, nameField : String, cameraId : String, micId : String, others : [CharacterData], pid:Process({hear:RequestMsg}));

#parameters
var halfWidth = 560.0;
var halfHeight = 315.0;
var charVelocity = 5.0;

#default room to start with
fun defaultRoom(clientPid) {
  (charData = (id = "None", name = "None", x = halfWidth, y = halfHeight, imageURL = "None"),
  directionV = Still, directionH = Still, state = "enterName", nameField = "", cameraId = "None", micId = "None", others = [], pid = clientPid)
}

#runs every frame
fun animFrameHandler() {
  animationFrame(fun(_) { NewFrame })
}

var upKey = "ArrowUp";
var downKey = "ArrowDown";
var leftKey = "ArrowLeft";
var rightKey = "ArrowRight";
var spaceKey = " ";

#handler to detect keydown event
fun keyDownHandler() {
  open MvuSubscriptions;

  onKeyDown(fun(evt) {
    var keycode = evt.key;
    if (keycode == upKey) {
      MoveCharV(Up)
    } else if (keycode == downKey) {
      MoveCharV(Down)
    } else if (keycode == leftKey) {
      MoveCharH(Left)
    } else if (keycode == rightKey) {
      MoveCharH(Right)
    } else {
      NoOp
    }
  })
}

#handler to detect keyup event
fun keyUpHandler() {
  open MvuSubscriptions;

  onKeyUp(fun(evt) {
    var keycode = evt.key;
    if (keycode == upKey || keycode == downKey) {
      MoveCharV(Still)
    } else if (keycode == leftKey || keycode == rightKey){
      MoveCharH(Still)
    } else {
      NoOp
    }
  })
}

#as user types into name box, this function is called
fun updateFieldHandler() {
  onInput(fun(str) { UpdateNameField(str) })
}

#when user presses enter, their name is passed into their character data and joins room
fun enterHandler() {
  onEnter(fun() { NameEntered })
}

fun pictureClickHandler() {
  onClick(fun() { Joined })
}

fun mediaClickHandler() {
  onClick(fun() {
    var deviceIds = JSApp.getSelectedOptions();
    var camId = hd(deviceIds);
    var micId = hd(tl(deviceIds));
    MediaChosen(camId, micId)
  })
}

#moves character in certain direction
fun moveChar(charData, direction) {
  if (direction == Up) {
    (charData with y = charData.y -. charVelocity)
  } else if (direction == Down) {
    (charData with y = charData.y +. charVelocity)
  } else if (direction == Left) {
    (charData with x = charData.x -. charVelocity)
  } else if (direction == Right) {
    (charData with x = charData.x +. charVelocity)
  } else {
    charData
  }
}

#removes charData from list of charDatas
fun removeChar(c, cs) {
  switch(cs) {
    case [] -> []
    case x::xs ->
      if (x.id == c.id)
        removeChar(c, xs)
      else
        x :: removeChar(c, xs)
  }
}

fun charWithIdExists(id, chars) {
  switch(chars) {
    case [] -> false
    case x::xs ->
      if (x.id == id)
        true
      else
        charWithIdExists(id, xs)
  }
}

fun getCharWithId(id, chars) {
  switch(chars) {
    case x::xs ->
      if (x.id == id)
        x
      else
        getCharWithId(id, xs)
  }
}

#checks if user's character is close to another's character, then displays their cam
sig closeEnough : (CharacterData, CharacterData, Bool) ~> ()
fun closeEnough(c1, c2, isMover) {
  var distance = sqrt((c2.x -. c1.x)^.2.0 +. (c2.y -. c1.y)^.2.0);
  if (distance <= 150.0) {
    if (isMover) {
      WebRTC.connectToUser(c1.id);
      if (WebRTC.checkIfConnectedToPeer(c1.id)) {
        JSApp.addPeerToList(c1.id);
        JSApp.displayLiveStream(c1.id)
      } else {
        ()
      }
    } else {
      if (WebRTC.checkIfConnectedToPeer(c1.id)) {
        JSApp.addPeerToList(c1.id);
        JSApp.displayLiveStream(c1.id)
      } else {
       ()
      }
    }
  } else {
    WebRTC.disconnectFromUser(c1.id);
    JSApp.removePeerVideoDiv(c1.id)
  }
}

#checks whether the user is close to any of their peers
fun closeToOthers(c, others) {
  switch(others) {
    case [] -> ()
    case x::xs ->
      closeEnough(x, c, true);
      closeToOthers(c, xs)
  }
}

#checks to see if a peer's character has been updated by retrieving the new charData
sig retrieveServerMessage : (%) {}~> Msg
fun retrieveServerMessage(pid) {
  spawnWait {
    pid ! RetrieveMsg(self());
    receive {
        case msg -> ServerMsg(msg)
    }
  }
}

#once the user receives an new/updated charData, it updates the room based on it
sig processServerMsg : (ServerMessage, Room) ~> Room
fun processServerMsg(serverMsg, room) {
  switch(serverMsg){
    case CharacterPosition(info) ->
      if (info.id <> room.charData.id && room.state == "joined" && charWithIdExists(info.id, room.others)) {
        var currentChar = getCharWithId(info.id, room.others);
        var newChar = (currentChar with x = info.x, y = info.y);
        var removeOther = removeChar(newChar, room.others);
        var addNewOther = newChar :: removeOther;
        closeEnough(newChar, room.charData, false);
        (room with others = addNewOther)
      } else {
        room
      }
    case CharacterIcon(info) ->
      if (info.id <> room.charData.id && room.state == "joined" && not(charWithIdExists(info.id, room.others))) {
        var charData = (id = info.id, name = info.name, x = 0.0, y = 0.0, imageURL = info.imageURL);
        var appendToOthers = charData :: room.others;
        var cData = room.charData;
        var charIcon = CharacterIcon(id = cData.id, name = cData.name, imageURL = cData.imageURL);
        serverPid ! BroadcastIcon(charIcon);
        (room with others = appendToOthers)
      } else {
        room
      }
  }
}

#main update function in MVU cycle, runs when message (Msg) is received
sig updt : (Msg, Room) ~> (Room, MvuCommands.Command(Msg))
fun updt(msg, room) {
  switch(msg) {
    #every frame, this is the case, updates room based on room
    case NewFrame ->
      var newCharV = moveChar(room.charData, room.directionV);
      var newCharH = moveChar(newCharV, room.directionH);
      ((room with charData = newCharH), MvuCommands.empty)
    #runs when user presses arrow key up or down, updates user's charData
    case MoveCharV(i) ->
      if (room.state == "joined") {
        var newCharV = moveChar(room.charData, i);
        var newCharH = moveChar(newCharV, room.directionH);
        closeToOthers(newCharH, room.others);
        var charPos = CharacterPosition(id = newCharH.id, x = newCharH.x, y = newCharH.y);
        serverPid ! BroadcastPosition(charPos);
        ((room with charData = newCharH, directionV = i), MvuCommands.empty)
      } else {
        (room, MvuCommands.empty)
      }
    #runs when user presses arrow key left or right, updates user's charData
    case MoveCharH(i) ->
      if (room.state == "joined") {
        var newCharH = moveChar(room.charData, i);
        var newCharV = moveChar(newCharH, room.directionV);
        closeToOthers(newCharV, room.others);
        var charPos = CharacterPosition(id = newCharV.id, x = newCharV.x, y = newCharV.y);
        serverPid ! BroadcastPosition(charPos);
        ((room with charData = newCharV, directionH = i), MvuCommands.empty)
      } else {
        (room, MvuCommands.empty)
      }
    #updates name field of room with the latest keyboard input
    case UpdateNameField(str) ->
      ((room with nameField = str), MvuCommands.empty)
    #updates room state to enter image
    case NameEntered ->
      ((room with state = "enterMedia"), MvuCommands.empty)
    #runs when user presses enter, and changes state of room to joined
    case MediaChosen(cameraID, micID) ->
      WebRTC.readyMediaDevices(cameraID, micID);
      WebRTC.registerUser();
      ((room with cameraId = cameraID, micId = micID, state = "enterImage"), MvuCommands.empty)
    case Joined ->
      JSApp.takePicture();
      var pictureURL = JSApp.getPictureURL();
      var cData = (room.charData with id = WebRTC.getUUID(), name = room.nameField, imageURL = pictureURL);
      var charIcon = CharacterIcon(id = cData.id, name = cData.name, imageURL = pictureURL);
      serverPid ! BroadcastIcon(charIcon);
      ((room with charData = cData, state = "joined", nameField = ""), MvuCommands.empty)
    case NoOp -> (room, MvuCommands.empty)
    #runs when the client finds a message (charData) in the client loop process
    case ServerMsg(msg) ->
      if (room.state == "joined") {
        var cData = room.charData;
        var charPos = CharacterPosition(id = cData.id, x = cData.x, y = cData.y);
        serverPid ! BroadcastPosition(charPos);
        var room = processServerMsg(msg, room);
        var f = fun() { retrieveServerMessage(room.pid) };
        (room, Spawn(f))
      } else {
        var room = processServerMsg(msg, room);
        var f = fun() { retrieveServerMessage(room.pid) };
        (room, Spawn(f))
      }
  }
}

### Rendering
var ae = MvuAttrs.empty;
var he = MvuHTML.empty;
fun ch(xs) { MvuHTML.concat(xs) }
fun ca(xs) { MvuAttrs.concat(xs) }

#HTML for charData
sig drawChar : (CharacterData) -> HTML(Msg)
fun drawChar(c) {
  var x = c.x;
  var y = c.y;
  var name = c.name;
  div (class ("character") +@
    style ("left:" ^^ floatToString(x) ^^ "px;top:" ^^ floatToString(y) ^^ "px;position:absolute;" ^^
    "background-image: url(" ^^ c.imageURL ^^ ");background-position: center;"),
    p (class("charName"), textNode(name))
  )
}

#list of charDatas in HTML
sig listOfHTMLChars : ([CharacterData]) ~> [HTML(Msg)]
fun listOfHTMLChars(cs) {
  switch(cs) {
    case []         -> []
    case charData::xs ->
      var x = charData.x;
      if (x <> 0.0)
        drawChar(charData) :: listOfHTMLChars(xs)
      else
        listOfHTMLChars(xs)
  }
}

sig drawCameraOption : (String, String) ~> HTML(Msg)
fun drawCameraOption(deviceId, label) {
  option (
    ca([
      id ("cameraOption"),
      value (deviceId)
    ]),
    textNode(label)
  )
}

sig drawMicOption : (String, String) ~> HTML(Msg)
fun drawMicOption(deviceId, label) {
  option (
    ca([
      id ("micOption"),
      value (deviceId)
    ]),
    textNode(label)
  )
}

sig listOfDeviceOptions : (([String], [String]), String) ~> [HTML(Msg)]
fun listOfDeviceOptions(devs, type) {
  switch(devs) {
    case ([], []) -> []
    case (id::xs, label::ys) ->
      if (type == "camera")
        drawCameraOption(id, label) :: listOfDeviceOptions((xs, ys), type)
      else
        drawMicOption(id, label) :: listOfDeviceOptions((xs, ys), type)
  }
}

#HTML UI for welcome page and name box
fun enterNameView(str) {
  div (id ("canvas"),
    div (id ("joinBox"),
      ch([
        h1 (id ("welcomeText"), textNode("Enter your name:")),
        input (
          ca([
            type ("text"),
            name ("enterName"),
            id ("nameBox"),
            value (str),
            updateFieldHandler(),
            enterHandler()
          ]),
          he)
      ])
    )
  )
}

fun enterMediaView() {
  var camIds = JSApp.getDeviceIds("videoinput");
  var camLabels = JSApp.getDeviceLabels("videoinput");
  var micIds = JSApp.getDeviceIds("audioinput");
  var micLabels = JSApp.getDeviceLabels("audioinput");
  div (id ("canvas"),
    div (id ("joinBox"),
      ch([
        h1 (id ("welcomeText"), textNode("Choose your media")),
        select_(id ("selectCamera"),
          ch(listOfDeviceOptions((camIds, camLabels), "camera"))
        ),
        select_(id ("selectMic"),
          ch(listOfDeviceOptions((micIds, micLabels), "mic"))
        ),
        input (
          ca([
            id ("mediaSubmitButton"),
            type ("submit"),
            value ("Confirm"),
            mediaClickHandler()
          ]),
          he)
      ])
    )
  )
}

fun enterImageView() {
  JSApp.displayLiveStream("local");
  div (id ("canvas"),
    div (id ("joinBox"),
      ch([
        h1 (id ("welcomeText"), textNode("Take a photo to use as your character icon!")),
        input (
          ca([
            id ("pictureTaker"),
            type ("submit"),
            value ("Use"),
            pictureClickHandler()
          ]),
          he)
      ])
    )
  )
}

fun joinedView(room) {
  var elem = getNodeById("localVideoDiv");
  domSetAttributeFromRef(elem, "class", "webcamMode");
  div (id ("canvas"), ch([
    drawChar(room.charData),
    ch(listOfHTMLChars(room.others))
  ]))
}

#main view function in MVU cycle, display different HTML bases on state of model
sig view : (Room) ~> HTML(Msg)
fun view(room) {
  if (room.state == "joined") {
    joinedView(room)
  } else if (room.state == "enterName") {
    enterNameView(room.nameField)
  } else if (room.state == "enterMedia") {
    enterMediaView()
  } else {
    enterImageView()
  }
}

#subscriptions to detect events for updt function
sig subscriptions : (Room) -> Sub(Msg)
fun subscriptions(model) {
  animFrameHandler() +^ keyUpHandler() +^ keyDownHandler()
}

#sends every message to every process
fun drain(msgs, pids) {
    switch (msgs) {
        case [] -> (msgs, pids)
        case msg :: msgs ->
            switch (pids) {
                case [] -> (msgs, pids)
                case pid :: pids ->
                    pid ! msg;
                    (msgs, pids)
            }
    }
}

#invariant, at least one of msgs, pids is empty.
fun clientLoop(msgs, pids) {
    receive {
      case Position(msg) ->
        var (msgs, pids) = drain(msgs ++ [msg], pids);
        clientLoop(msgs, pids)
      case Icon(msg) ->
        var (msgs, pids) = drain(msgs ++ [msg], pids);
        clientLoop(msgs, pids)
      case RetrieveMsg(pid) ->
        var (msgs, pids) = drain(msgs, pids ++ [pid]);
        clientLoop(msgs, pids)
    }
}

fun waitForDeviceIds() {
  var gathered = JSApp.checkDevicesGathered();
  if (not(gathered))
    waitForDeviceIds()
  else
    ()
}

#begins webRTC connection and registers client with server
fun clientRegister() {
  JSApp.gatherMediaDeviceIds("videoinput");
  JSApp.gatherMediaDeviceIds("audioinput");
  waitForDeviceIds();
  #WebRTC.registerUser();
  serverPid ! Register(self());
  clientLoop([], [])
}

fun runMVU(clientPid) {
  #WebRTC.waitForWebcam();
  Mvu.run("placeholder", defaultRoom(clientPid), view, updt,
      subscriptions, MvuCommands.spawnProc(fun () { retrieveServerMessage(clientPid) }));
  ()
}

fun mainPage(serverPid) {
  var clientPid = spawnClient { clientRegister() };
  var mvuClient = spawnClient { runMVU(clientPid) };
  page
  <html>
    <head>
      <title>Room</title>
      <link rel="stylesheet" href="css/app.css" type="text/css" />
    </head>
    <body>
      <div id="placeholder"></div>
      <div id="videos"></div>
    </body>
  </html>
}

fun main() {
  addRoute("/", fun(_) { mainPage(serverPid) });
  addStaticRoute("/css", "css", [("css", "text/css")]);
  addStaticRoute("/js", "js", [("js", "text/javascript")]);
  serveWebsockets();
  servePages()
}

main()
