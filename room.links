open import MvuHTML;
open import MvuAttrs;
open import MvuEvents;
open import MvuSubscriptions;
import Mvu;
import MvuCommands;

fun broadcast(clients, msg) server {
    switch (clients) {
        case [] -> ()
        case c::clients ->
            c ! msg;
            broadcast(clients, msg)
    }
}

fun serverLoop(clients) server {
    receive {
        case Register(pid) ->
            var newClients = pid :: clients;
            serverLoop(newClients)

        case Broadcast(msg) ->
            broadcast(clients, Message(msg));
            serverLoop(clients)
    }
}

var serverPid = spawn { serverLoop([]) };

typename Circle = (id: String, x : Float, y: Float, vx : Float, vy : Float);

typename CircleState = [| Up | Down | Left | Right | Still |];

# At the moment, the only message broadcast is a circle's co-ordinates
typename ServerMessage = Circle;

typename Msg =
  [| NewFrame
   | MoveCircle : CircleState
   | NoOp
   | ServerMsg:ServerMessage
  |];

typename RequestMsg = [| Message:ServerMessage | RetrieveMsg:Process({hear:ServerMessage}) |];

typename Room =
  (circle : Circle, circleState : CircleState, others : [Circle], pid:Process({hear:RequestMsg}));

var width = 700.0;
var height = 700.0;
var halfWidth = 350.0;
var halfHeight = 350.0;
var circleVelocity = 5.0;

fun hex(dec) {
  if (dec < 10) {
    intToString(dec)
  } else if (dec >= 10 && dec < 16) {
    switch(dec) {
      case 10 -> "a"
      case 11 -> "b"
      case 12 -> "c"
      case 13 -> "d"
      case 14 -> "e"
      case 15 -> "f"
    }
  } else {
    hex(dec / 16) ^^ hex(mod(dec, 16))
  }
}

fun createUUID() {
  fun s4() {
    implode(tl(explode(hex(floatToInt(floor((1.0 +. random()) *. 65536.0))))))
  }
  s4() ^^ s4() ^^ "-" ^^ s4() ^^ "-" ^^ s4() ^^ "-" ^^ s4() ^^ "-" ^^ s4() ^^ s4() ^^ s4()
}

fun defaultRoom(clientPid) {
  (circle = (id = createUUID(), x = halfWidth, y = halfHeight, vx = circleVelocity, vy = circleVelocity),
    circleState = Still, others = [], pid = clientPid)
}

fun animFrameHandler() {
  animationFrame(fun(_) { NewFrame })
}

var upKey = "ArrowUp";
var downKey = "ArrowDown";
var leftKey = "ArrowLeft";
var rightKey = "ArrowRight";
var spaceKey = " ";


fun keyDownHandler() {
  open MvuSubscriptions;

  onKeyDown(fun(evt) {
    var keycode = evt.key;
    if (keycode == upKey) {
      MoveCircle(Up)
    } else if (keycode == downKey) {
      MoveCircle(Down)
    } else if (keycode == leftKey) {
      MoveCircle(Left)
    } else if (keycode == rightKey) {
      MoveCircle(Right)
    } else {
      NoOp
    }
  })
}

fun keyUpHandler() {
  open MvuSubscriptions;

  onKeyUp(fun(evt) {
    var keycode = evt.key;
    if (keycode == upKey || keycode == downKey || keycode == leftKey || keycode == rightKey) {
      MoveCircle(Still)
    } else {
      NoOp
    }
  })
}

var ae = MvuAttrs.empty;
var he = MvuHTML.empty;
fun ch(xs) { MvuHTML.concat(xs) }

sig drawCircle : (Float,Float) -> HTML(Msg)
fun drawCircle(x,y) {
  div (class ("circle") +@
       style ("left:" ^^ floatToString(x) ^^ "px;top:" ^^ floatToString(y) ^^ "px;position:absolute;"),
       he)
}

sig listOfHTMLCircles : ([Circle]) ~> [HTML(Msg)]
fun listOfHTMLCircles(cs) {
  switch(cs) {
    case []         -> []
    case circle::xs ->
      drawCircle(circle.x, circle.y) :: listOfHTMLCircles(xs)
  }
}

fun moveCircle(circle, direction) {
  if (direction == Up) {
    (circle with y = circle.y -. circleVelocity)
  } else if (direction == Down) {
    (circle with y = circle.y +. circleVelocity)
  } else if (direction == Left) {
    (circle with x = circle.x -. circleVelocity)
  } else if (direction == Right) {
    (circle with x = circle.x +. circleVelocity)
  } else {
    circle
  }
}

fun removeCircle(c, cs) {
  switch(cs) {
    case [] -> []
    case x::xs ->
      if (x.id == c.id)
        removeCircle(c, xs)
      else
        x :: removeCircle(c, xs)
  }
}

sig retrieveServerMessage : (%) {}~> Msg
fun retrieveServerMessage(pid) {
  spawnWait {
    pid ! RetrieveMsg(self());
    receive {
        case msg -> ServerMsg(msg)
    }
  }
}

# Currently, msg is a circle
fun processServerMsg(msg, room) {
    var c = msg;
    var cid = c.id;
    if (cid <> room.circle.id) {
      var removeOther = removeCircle(c, room.others);
      var addNewOther = c :: removeOther;
      (room with others = addNewOther)
    } else {
      room
    }
}

sig updt : (Msg, Room) ~> (Room, MvuCommands.Command(Msg))
fun updt(msg, room) {
    switch(msg) {
      case NewFrame ->
        var newCircle = moveCircle(room.circle, room.circleState);
        ((room with circle = newCircle, circleState = room.circleState), MvuCommands.empty)
      case MoveCircle(i) ->
        var newCircle = moveCircle(room.circle, i);
        serverPid ! Broadcast(newCircle);
        ((room with circle = newCircle, circleState = i), MvuCommands.empty)
      case NoOp -> (room, MvuCommands.empty)
      case ServerMsg(msg) ->
        var room = processServerMsg(msg, room);
        var f = fun() { retrieveServerMessage(room.pid) };
        (room, Spawn(f))
    }
}

sig view : (Room) ~> HTML(Msg)
fun view(room) {
  div (class ("canvas"), ch([
    drawCircle(room.circle.x,room.circle.y),
    ch(listOfHTMLCircles(room.others))
  ]))
}

sig subscriptions : (Room) -> Sub(Msg)
fun subscriptions(model) {
  animFrameHandler() +^ keyUpHandler() +^ keyDownHandler()
}


fun drain(msgs, pids) {
    switch (msgs) {
        case [] -> (msgs, pids)
        case msg :: msgs ->
            switch (pids) {
                case [] -> (msgs, pids)
                case pid :: pids ->
                    pid ! msg;
                    (msgs, pids)
            }
    }
}

# Invariant: At least one of msgs, pids is empty.
fun clientLoop(msgs, pids) {
    receive {
        case Message(msg) ->
            var (msgs, pids) = drain(msgs ++ [msg], pids);
            clientLoop(msgs, pids)
        case RetrieveMsg(pid) ->
            var (msgs, pids) = drain(msgs, pids ++ [pid]);
            clientLoop(msgs, pids)
    }
}

fun clientRegister(serverPid) {
    serverPid ! Register(self());
    clientLoop([], [])
}

fun mainPage(serverPid) {
  var clientPid = spawnClient { clientRegister(serverPid) };
  Mvu.run("placeholder", defaultRoom(clientPid), view,
      updt,
      subscriptions, MvuCommands.spawnProc(fun () { retrieveServerMessage(clientPid) }));
  page
  <html>
    <head>
      <title>Room</title>
      <link rel="stylesheet" href="css/pong.css" type="text/css" />
    </head>
    <body>
      <div id="placeholder"></div>
    </body>
  </html>
}

fun main() {
  addRoute("/", fun(_) { mainPage(serverPid) });
  addStaticRoute("/css", "css", [("css", "text/css")]);
  addStaticRoute("/js", "js", [("css", "text/javascript")]);
  serveWebsockets();
  servePages()
}

main()
